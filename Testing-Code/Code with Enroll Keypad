 ////////////// SETUP ///////////////////////////
#include <WiFi.h>
#include <WebServer.h>
#include <NetworkClient.h>
#include <ESP_Mail_Client.h>
#include "EEPROM.h"
#include <Arduino.h>
#include <Keypad.h>
#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// LED Pin Definitions
#define PIN_RED    2
#define PIN_GREEN  4
#define PIN_BLUE   13

#define RELAY_PIN 23

//EEPROM Parameters
#define EMAIL_LENGTH_BYTE 6
#define EMAIL_START_BYTE 7

//Motion Sensor Code
const int trigPin1 = 5;
const int echoPin1 = 35;

bool shouldReportDistance = true;
long timeOfNextMotionTrigger = 0;
#define MOTION_REPORT_DELAY 1000 * 60 * 5

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

//door sensor
#define DOOR_SENSOR_PIN 12
long DOOR_OPEN_ALARM_TIMEOUT = 30000;
bool isDoorOpen = false;
long doorOpenTime = 0;
bool shouldSendEmail = true;

// Buzzer Pin
const int buzzerPin = 15;

bool enrollFinger = false;
bool resetPasscode = false;
bool mastercodeReset = false;
bool mastercodeEnroll = false;

int inputIndex = 0;

HardwareSerial mySerial(2);

//Fingerprint
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// Keypad Definitions
#define ROWS  4
#define COLS  4

long duration1;
float distanceCm1;
float distanceInch1;
 
const char* ssid = "everglades_Guest"; // Change as needed
const char* password = "Dell2074"; // Change as needed

bool inLockdownMode = false;
unsigned long int disableUntil = 0;
const unsigned long disableDuration = 1800000; //30 minutes

#define SMTP_server "smtp.gmail.com"
#define SMTP_Port 465

#define sender_email "smartsafesd1@gmail.com"
#define sender_password "owtibadqkzdoakpo"

#define Recipient_email "sripriyapalli@gmail.com"
#define Recipient_name "Smart Safe User"

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);



#define EEPROM_SIZE 10  // EEPROM size for storing passcode
#define PASSCODE_LENGTH 6

bool mastercodeEntry = false;


// Code Variables
char masterCode[6] = {'1', '0', '1', '0', '1', '0'};
char enteredCode[6] = {' ', ' ', ' ', ' ', ' ', ' '};
char correctCode[6] = {'1', '2', '3', '4', '5', '6'};
int attempts = 0;

int numberOfCodeDigitsEntered = 0;

bool safeIsUnlocked = false;

// OLED Definitions
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

///////////////////// SETUP FUNCTIONS////////////////////////

// Function that displasy centered text
void displayCenteredText(const char* text, int y) {
  int16_t x1, y1;
  uint16_t w, h;
  
  display.getTextBounds(text, 0, y, &x1, &y1, &w, &h); // Get text dimensions
  
  int x = (SCREEN_WIDTH - w) / 2; // Center text horizontally

  display.setCursor(x, y);
  display.print(text);
}

void displayWelcomeMessage() {
  display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    displayCenteredText("Enter code", 20);
    displayCenteredText("or", 35);
    displayCenteredText("use fingerprint", 50);
    display.display();
  }

void resetCode() {
  for (int i = 0; i < 6; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);

  displayWelcomeMessage();
}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 6; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  ////////////// KEYPAD ////////////////////////////////////
  if (codeMatched == true) {
    // Code matched - Access Granted
    Serial.println("Access granted");

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("GRANTED" ,35);
    display.display();

    analogWrite(PIN_GREEN, 250);
    analogWrite(buzzerPin, 250);
    delay(1000);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 0);

    energizeLock();

    attempts = 0;

    //Send Email if Access Attempt is correct
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "Hello Safe User, \n\nWe wanted to notify you that your safe was accessed. Please review and confirm this activity to ensure it was authorized. You may check the timestamp on this email for the exact time of access. If this was an unauthorized attempt, we recommend securing the safe and taking extra precautions. \n\nThank you, \nSmart Safe");
    Serial.println("Sending safe accessed email...");

    resetCode();

  } else {
    // Code did not match - Access Denied
    attempts++;
    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 250);

   Serial.println("Access denied");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("DENIED" ,35);
	
	    // Display "X" symbols horizontally for each failed attempt
    display.setTextSize(1);
    int startX = 30; // Start position for the first "X"
    int yPosition = 50; // Fixed y position for all "X"s

    for (int i = 0; i < attempts; i++) {
      display.setCursor(startX + (i * 20), yPosition); // Move right for each "X"
      display.print("X");
    }
    display.display();

    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(1000);
    
    if(attempts != 4){
      resetCode();
    }
  }

/////////////////////// LOCKDOWN MODE //////////////////////////////////
  if(attempts==4){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
         inLockdownMode = true;
        
        disableUntil = millis() + disableDuration;
                
        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        analogWrite(PIN_RED, 250); //red on
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        analogWrite(buzzerPin, 0); // LOW to turn off the buzzer

        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();
        delay(1000);

        //Send Email about Lockdown Mode
        sendEmail(readEEPROM(), "High Alert: Safe Lockdown Mode Activated", "Hello Safe User, \n\nThis is a high-priority alert to inform you that your safe has entered Lockdown Mode. Lockdown Mode is activated after multiple failed access attempts, and no further access will be allowed until a registered user disengages it using their fingerprint. \n\nThank you, \nSmart Safe");
        Serial.println("Sending email about lockdown mode...");
        
        attempts=0;

      }
}

//////////////////// WEBSITE + EEPROM ///////////////////////////////////////////////
// Declare the global used SMTPSession object for SMTP transport 
SMTPSession smtp;

WebServer server(80);
Session_Config config;

void readCodeFromEEPROM() {
  for (int i = 0; i < 6; i++) {

      char temp = EEPROM.read(i);
      correctCode[i] = temp;
      Serial.println(temp);

    }
}

String readEEPROM() {
  //Ready the first byte
  int val = EEPROM.read(EMAIL_LENGTH_BYTE);

  String emailAddress = "";

  if (val == 0) {
    Serial.println("No email address has been saved to EEPROM");
  } else {
    for (int i = 0; i < val; i++) {

      char temp = EEPROM.read(i + EMAIL_START_BYTE);
      emailAddress = emailAddress + String(temp);
      //Serial.println(temp);

    }
    
  }

  return emailAddress;
}

void clearEmailFromEEPROM() {
}

void saveEmailToEEPROM(String emailAddress) {

  //Determine length of email address
  //Save it to byte 0 in eeprom
  int emailLength = emailAddress.length();
  EEPROM.write(EMAIL_LENGTH_BYTE, emailLength);

  for (int i = 0; i < emailLength; i++) {
    Serial.print("Writing character: ");
    Serial.print(emailAddress.charAt(i));
    Serial.print(" to address: ");
    Serial.println(i + EMAIL_START_BYTE, HEX);
    
    EEPROM.write(i + EMAIL_START_BYTE, emailAddress.charAt(i));

  }

  EEPROM.commit();

  //Test by checking the saved email
  String savedEmail = readEEPROM();
  Serial.print("Saved Email: ");
  Serial.println(savedEmail);
}

//////////////////////////// SETUP FUNCTION ////////////////////////////
void setup() {

  Serial.begin(115200);

  EEPROM.begin(258);


  delay(3000);

  readCodeFromEEPROM();

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  pinMode(RELAY_PIN, OUTPUT); 
  digitalWrite(RELAY_PIN, HIGH);  // lock the door

  pinMode(trigPin1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin1, INPUT); // Sets the echoPin as an Input

  pinMode(DOOR_SENSOR_PIN, INPUT_PULLUP); //door sensor

  mySerial.begin(57600, SERIAL_8N1, 17, 16);

  // Initialize I2C (Ensure correct pins are used)
  Wire.begin(21, 22);  // Default I2C pins for ESP32 (modify if needed)
  delay(100);          // Allow time for I2C to stabilize

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Check OLED I2C address (default 0x3C)
    Serial.println("SSD1306 allocation failed");
    for (;;); // Halt the program if the display doesn't initialize
  }

  //clear display and setup display settings
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe", 5);
  displayCenteredText("Enter code", 20);
  displayCenteredText("or", 35);
  displayCenteredText("use fingerprint", 50);
  display.display();

  if (finger.verifyPassword()) {
    Serial.println("Fingerprint Sensor Connected");
  } else {
    Serial.println("Unable to find Sensor\nCheck Connections");
  }

  String savedEmail = readEEPROM();
  Serial.print("Saved EmailL: ");
  Serial.println(savedEmail);


  //Setup Email client
  MailClient.networkReconnect(true);

  smtp.debug(1);

  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Print the ESP32's IP address
  Serial.print("ESP32 Web Server's IP address: ");
  Serial.println(WiFi.localIP());

  ////////////////////////////// HTML WEBSITE CODE //////////////////////////////////////////////////
  // Define a route to serve the HTML page
  server.on("/", HTTP_GET, []() {
    String response = "<!DOCTYPE html>"
  "    <html>"
  "    <head>"
  "        <title>Smart Safe</title>"
  "        <style>"
  "            h1 {text-align: center;}"
  "            .info  {font-size: 18px; color: #333;}"
  "            body {"
  "                background-color: lightblue;"
  "            }"
  "            input {padding: 10px; font-size: 16px; width: 250px;}"
  "            button {"
  "                padding: 10px 15px;"
  "                font-size: 16px; border-radius: 5px; background-color: #007BFF; color: white;"
  "                border: none; cursor: pointer;"
  "                margin-left: 10px;"
  "            }"
  "            button:hover {background-color: #0056b3;}"
  "            #main {"
  "                flex-direction: column;"
  "            }"
  "            .f50 {"
  "                flex: 0 0 50%;"
  "            }"
  "            .df {"
  "                display: flex;"
  "            }"
  "            .row {"
  "                padding: 10px;"
  "                justify-content: center;"
  "            }"
  "            #contact {"
  "                flex-direction: column;"
  "                align-items: center;"
  "            }"
  "            #formContainer {"
  "                flex-direction: column;"
  "            }"
  "            .col {"
  "                display: flex;"
  "                flex-direction: column;"
  "            }"
  "            #row2 {"
  "                justify-content: space-around;"
  "            }"
  "            #row2 > * {"
  "                flex: 0 0 auto;"
  "            }"
  "            #row3 {"
  "                justify-content: center;"
  "                align-items: center;"
  "                display: flex;"
  "            }"
  "            #row3 > * {"
  "                flex: 0 0 auto;"
  "            }"
  "        </style>"
  "    </head>"
  "    <body>"
  "        <div id='main' class='df'>"
  "            <div id='row1' class='row df'>"
  "                <h1>Welcome to Smart Safe</h1>"
  "            </div>"
  "            <div id='row2' class='row f50 df'>"
  "                <div id='formContainer' class='col f50'>"
  "                    <h2>Please Enter Your Email Address:</h2>"
  "                    <div id='inputWrapper' class='df' style='margin-bottom:20px'>"
  "                        <input type='email' id='email' name='user_email' placeholder='Enter your email here' />"
  "                        <button onclick='displayMessage()'>Submit</button>"
  "                    </div>"
  "                    <span id='SubmitMessage'></span>                 "
  "                </div>"
  "                <div class='info col'>"
  "                    <h3>You will receive email alerts for the following events:</h3>"
  "                    <ol>"
  "                        <li>Successful Safe Access - When the correct security code or fingerprint is used.</li>"
  "                        <li>Motion Detected Near the Safe - Motion is detected nearby. (This sensor will reset every 5 minutes to prevent excessive alerts.)</li>"
  "                        <li>Safe Lockdown Activated - Too many failed access attempts have triggered Lockdown Mode.</li>"
  "                        <li>Email Registration Confirmation - Your email has been successfully registered for notifications.</li>"
  "                        <li>Safe Door Left Open - The door has been left open for more than 30 seconds.</li>"
  "                        <li>Tamper Detection Alert - Someone is attempting to access your safe without proper authentication.</li>"
  "                    </ol>"
  ""
  "                    <div>Note: Please use your primary Gmail account to register for email notifications.</div>"
  "                </div>"
  "            </div>"
  "            <div id='row3' class='row'>"
  "                <div id='contact' class='f50 df'>"
  "                    <h2>Contact Us:</h2>"
  "                    <span class='info'>Email: SmartSafeSD1@gmail.com</span>"
  "                    <span class='info'>Phone Number: 345-456-5678</span>"
  "                    <span class='info'>"
  "                        Feel free to contact us anytime with questions or for more information about your safe!</span>"
  "                </div>"
  "            </div>"
  "        </div>"
  "        <script>"
  "            function displayMessage() {"
  "            document.getElementById('SubmitMessage').innerHTML = 'Thank you, please keep an eye on emails from our safe!';"
  "            fetch(`/sendemail?email=${document.getElementById('email').value}`, {method: 'GET'} )"
  "            .then(res => console.log(res))"
  "            }"
  "        </script>"
  "    </body>"
  "</html>";

      server.send(200, "text/html", response);
  });


  server.on("/sendemail", HTTP_GET, []() {
    Serial.println("SendEmail endpoint triggered");
 
    String email = server.arg(0);

    saveEmailToEEPROM(email);

    sendEmail(readEEPROM(), "Email Sign Up Complete", "Hello Safe User, \n\nThanks for registering your email with Smart Safe! Please check your email for future notifications about your safe. \n\nThank you, \nSmart Safe"); 

    server.send(200, "text/html", email);

    resetCode();
  });

  // Start the server
  server.begin();

  // Reset Code
  resetCode();
  
  
  #if defined(ESP8266) || defined(ESP32) && !defined(ARDUINO_NANO_RP2040_CONNECT)

    configTime(0, 0, "pool.ntp.org", "time.nist.gov");
    while (time(nullptr) < ESP_MAIL_CLIENT_VALID_TS)
    {
        delay(100);
    }
    #endif
 
}
/////////////////////////////// END OF SETUP FUNCTION ///////////////////////////////

void checkLockdownTimeout() {
  if (inLockdownMode) {
    if (millis() >= disableUntil) {
      inLockdownMode = false;
      resetCode();
      Serial.println("Lockdown mode timeout. Lockdown mode deactivated");
    }
  }
}
/////////////////////////// LOOP FUNCTION ////////////////////////////////////////////
void loop() {

  checkLockdownTimeout();
  server.handleClient();
  delay(2);

  //////////////////////////MOTION SENSOR///////////////////////////////////////
  // Sensor 1
digitalWrite(trigPin1, LOW);
delayMicroseconds(2);
digitalWrite(trigPin1, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin1, LOW);
duration1 = pulseIn(echoPin1, HIGH);

   // Calculate the distance
  distanceCm1 = duration1 * 0.034 / 2;
  
  // Convert to inches
  distanceInch1 = distanceCm1 * CM_TO_INCH;

  checkDoor(); //check door sensor

//First Motion Sensor
  if(distanceInch1 <2){

    Serial.print("\nMotion Detected\n");
    

    if (millis() >= timeOfNextMotionTrigger) {

      analogWrite(PIN_BLUE, 250);
      analogWrite(buzzerPin, 250);
      delay(500);
      analogWrite(PIN_BLUE, 0);
      analogWrite(buzzerPin, 0);

       display.clearDisplay();
       display.setTextSize(1);
       display.setTextColor(WHITE);
       displayCenteredText("SmartSafe", 5);
       display.setTextSize(1);
       displayCenteredText("Motion Detected", 20);
       display.display();

      delay(2000);

      sendEmail(readEEPROM(), "Alert: Motion Detected Near Your Safe", "Hello Safe User, \n\nWe wanted to alert you that movement was detected near your safe. This may indicate an attempt to access or tamper with the safe. Please verify that this activity is authorized. If you suspect unauthorized access, consider checking the area and taking necessary precautions.  \n\nThank you, \nSmart Safe");
      Serial.println("Sending Motion Detected Email...");

      //Still in Lockdown Mode
    if(inLockdownMode == true){
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();
      
      Serial.println("Still in Lockdown Mode");
    } else {
      resetCode();
    }
      timeOfNextMotionTrigger = millis() + MOTION_REPORT_DELAY;
    }

    
  }

  ////////////////////////Keypad Case Statement Loop//////////////////////////////////////////////
if (inLockdownMode == false && keypad.getKeys()) {
  
    for (int i = 0; i < LIST_MAX; i++) {
      if (keypad.key[i].stateChanged) { // Only find keys that have changed state
        switch (keypad.key[i].kstate) { // Check active key state
          case PRESSED:
          analogWrite(buzzerPin, 250);
          delay(200);
          analogWrite(buzzerPin, 0);
          Serial.println(keypad.key[i].kchar);
            switch (keypad.key[i].kchar) {
              case '*': // Reset
                analogWrite(buzzerPin, 250);
                delay(200);
                analogWrite(buzzerPin, 0);
                delay(500);

                display.clearDisplay();
                display.setTextSize(1);
                display.setTextColor(WHITE);
                displayCenteredText("SmartSafe", 5);
                display.setTextSize(1);
                displayCenteredText("Reset", 20);
                displayCenteredText("Enter Code Again",35);
                display.display();

                delay(2000);
                resetCode();
                break;
              case '#': // Check code
                checkEnteredCode();
                break;
                /*
              case 'A': //Enroll fingerprint
                  mastercodeEnroll = true;
                  resetCode();
                  display.clearDisplay();
                  display.setTextSize(1);
                  display.setTextColor(WHITE);
                  displayCenteredText("SmartSafe Mastermode", 5);
                  displayCenteredText("Enter master code", 20);
                  displayCenteredText("to enroll finger", 35);
                  display.display();
                  while(mastercodeEnroll == true){
                    handleMasterPasscodeEnroll();
                  }
                  break;
                  */
              case 'B': //Reset passcode
                  mastercodeEntry = true;
                  resetCode();
                  display.clearDisplay();
                  display.setTextSize(1);
                  display.setTextColor(WHITE);
                  displayCenteredText("SmartSafe Mastermode", 5);
                  displayCenteredText("Enter Master Code", 20);
                  displayCenteredText("To Reset Passcode", 35);
                  display.display();
                  while(mastercodeEntry == true){
                    handleMasterPasscodeEntry();
                  }
                  break;
              default: // Enter digits
                if (numberOfCodeDigitsEntered < 6) {
                  enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                  numberOfCodeDigitsEntered++;

                display.clearDisplay();
                display.setTextSize(1);
                display.setTextColor(WHITE);
                displayCenteredText("SmartSafe", 5);
                display.setTextSize(1.5);
                display.setCursor(31, 25);

                for (int i = 0; i < numberOfCodeDigitsEntered; i++){
                  display.print("* ");
                }
                display.display();
                }
                break;
            }
            break;
        }

      }
    }
  }

  // FINGERPRINT PROCESSING
  getFingerprintID();
  
}
/////////////////////////END OF LOOP FUNCTION////////////////////////////////
bool compareCodes(char entered[], char stored[]) {
    for (int i = 0; i < PASSCODE_LENGTH; i++) {
        if (entered[i] != stored[i]) {
            return false;
        }
    }
    return true;
}

void savePasscode(char newPasscode[]) {
    for (int i = 0; i < PASSCODE_LENGTH; i++) {
        EEPROM.write(i, newPasscode[i]);
        correctCode[i] = newPasscode[i];  
    }
    EEPROM.commit();
}

// Update OLED Display based on code
void updateMasterDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe Mastermode", 5);
  display.setCursor(25, 25);
  
  // Show "*" for each entered digit
  for (int i = 0; i < inputIndex; i++) {
    display.print("* ");
  }
  display.display();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

// Update OLED Display based on code
void updateResetDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe Resetmode", 5);
  display.setCursor(25, 25);
  
  // Show "*" for each entered digit
  for (int i = 0; i < inputIndex; i++) {
    display.print("* ");
  }
  display.display();
}

void updateOLEDDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe", 5);
  display.setCursor(25, 25);
  
  // Show "*" for each entered digit
  for (int i = 0; i < inputIndex; i++) {
    display.print("* ");
  }
  display.display();
}


void handleMasterPasscodeEntry() { 
    if (keypad.getKeys()) {
        for (int i = 0; i < LIST_MAX; i++) {
            if (keypad.key[i].stateChanged && keypad.key[i].kstate == PRESSED) {  
                char key = keypad.key[i].kchar;

                // Sound buzzer once per key press
                analogWrite(buzzerPin, 100);
                delay(200);
                analogWrite(buzzerPin, 0);

                // Reset Code
                if (key == '*') {
                    resetCode();
                    updateOLEDDisplay();
                } 
                // Check Master Code
                else if (key == '#') {
                    if (compareCodes(enteredCode, masterCode)) {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Mastercode", 5);
                        displayCenteredText("Master Code", 20);
                        displayCenteredText("Approved", 35);
                        display.display();

                        analogWrite(PIN_GREEN, 250);
                        analogWrite(buzzerPin, 100);
                        delay(1000);
                        analogWrite(PIN_GREEN, 0);
                        analogWrite(buzzerPin, 0);

                        resetCode();
                        
                        resetPasscode = true;
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Enter New", 20);
                        displayCenteredText("Passcode", 35);
                        display.display();
                        while (resetPasscode == true){
                          setNewPasscode();
                        }
                    } else {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Mastermode", 5);
                        displayCenteredText("Incorrect", 20);
                        displayCenteredText("Master Code", 35);
                        display.display();

                        analogWrite(PIN_RED, 250);
                        analogWrite(buzzerPin, 100);
                        delay(1000);
                        analogWrite(PIN_RED, 0);
                        analogWrite(buzzerPin, 0);

                        resetCode(); 
                        displayWelcomeMessage();
                        mastercodeEntry = false;
                    }
                } 
                // Enter Digits for Master Code
                else {
                    if (inputIndex < PASSCODE_LENGTH) {
                        enteredCode[inputIndex] = key;
                        inputIndex++;
                        updateMasterDisplay();
                    } else {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Mastermode", 5);
                        displayCenteredText("Too Many Digits", 20);
                        displayCenteredText("Entered", 35);
                        display.display();
                        for (int i = 0; i < PASSCODE_LENGTH; i++) {
                        enteredCode[i] = ' ';
                        enteredCode[i] = '\0';
                          }
                        numberOfCodeDigitsEntered = 0;
                        delay(1000);

                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Mastermode", 5);
                        displayCenteredText("Enter Master Code", 20);
                        displayCenteredText("To Reset Passcode", 35);
                        display.display();
                    }
                }
            }
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

void setNewPasscode() {
    if (keypad.getKeys()) {
        for (int i = 0; i < LIST_MAX; i++) {
            if (keypad.key[i].stateChanged && keypad.key[i].kstate == PRESSED) {  
                char key = keypad.key[i].kchar;

                // Sound buzzer once per key press
                analogWrite(buzzerPin, 100);
                delay(200);
                analogWrite(buzzerPin, 0);

                // Reset Code
                if (key == '*') {
                    resetCode();
                    updateResetDisplay();
                } 
                // Submit Passcode
                else if (key == '#') {
                    if (inputIndex == PASSCODE_LENGTH) {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Password", 20);
                        displayCenteredText("Reset", 35);
                        display.display();
                        
                        analogWrite(PIN_GREEN, 250);
                        analogWrite(buzzerPin, 100);
                        delay(1000);
                        analogWrite(PIN_GREEN, 0);
                        analogWrite(buzzerPin, 0);

                        savePasscode(enteredCode);

                        delay(500);

                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Password", 20);
                        displayCenteredText("Saved", 35);
                        display.display();

                        analogWrite(PIN_GREEN, 250);
                        analogWrite(buzzerPin, 100);
                        delay(1000);
                        analogWrite(PIN_GREEN, 0);
                        analogWrite(buzzerPin, 0);
                        resetCode();
                        resetPasscode = false;
                        mastercodeEntry = false;
                    } else {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Not Enough Digits", 20);
                        displayCenteredText("Try Again", 35);
                        display.display();

                        analogWrite(PIN_RED, 250);
                        analogWrite(buzzerPin, 100);
                        delay(1000);
                        analogWrite(PIN_RED, 0);
                        analogWrite(buzzerPin, 0);

                        for (int i = 0; i < PASSCODE_LENGTH; i++) {
                        enteredCode[i] = ' ';
                        enteredCode[i] = '\0';
                          }
                        numberOfCodeDigitsEntered = 0;
                        updateResetDisplay();
                    }
                } 
                // Enter Digits for Passcode
                else {
                    if (numberOfCodeDigitsEntered < PASSCODE_LENGTH) {
                        enteredCode[numberOfCodeDigitsEntered] = key;
                        numberOfCodeDigitsEntered++;
                        updateResetDisplay();
                    } else {
                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Too Many Digits", 20);
                        displayCenteredText("Entered", 35);
                        display.display();
                        for (int i = 0; i < PASSCODE_LENGTH; i++) {
                        enteredCode[i] = ' ';
                        enteredCode[i] = '\0';
                          }
                        numberOfCodeDigitsEntered = 0;
                        delay(1000);

                        display.clearDisplay();
                        display.setTextSize(1);
                        display.setTextColor(WHITE);
                        displayCenteredText("SmartSafe Resetmode", 5);
                        displayCenteredText("Enter New", 20);
                        displayCenteredText("Passcode", 35);
                        display.display();
                    }
                }
                break; // Stop checking once a valid key is handled
            }
        }
    }
}

//////////////////////// LOCK FUNCTION////////////////////////////////////
void energizeLock(){

  safeIsUnlocked = true;

    digitalWrite(RELAY_PIN, LOW); // unlock the door
    delay(5000);
    digitalWrite(RELAY_PIN, HIGH);  // lock the door
    delay(1000);
}

////////////////////// DOOR SENSOR///////////////////////////////////////
void checkDoor() {

  if (isDoorOpen == true) {
    //Door is currently open 
    digitalWrite(PIN_BLUE, 255); 
    display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setTextSize(1);
      displayCenteredText("SmartSafe", 5);      
      displayCenteredText("Door Open", 20);
      display.display();

    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      //Door is still open
      //Check the time to see if it's time to send the email
      if (millis() >= doorOpenTime + DOOR_OPEN_ALARM_TIMEOUT && shouldSendEmail == true) {

        //Send the email
        Serial.println("Sending door open alarm email");
        sendEmail(readEEPROM(), "Alert: Safe Door Left Open", "Hello Safe User, \n\nWe wanted to alert you that your safe door has been left open. Please close the door of your safe as soon as possible.  \n\nThank you, \nSmart Safe");
        shouldSendEmail = false;

        resetCode();
      }
    } else {
      //Door is now closed
      Serial.println("Door is now closed");
      digitalWrite(PIN_BLUE, 0);
      shouldSendEmail = true;
      safeIsUnlocked = false;
      delay(50);
      isDoorOpen = false;
      resetCode();
    }
    
  } else {
    
    //Door was closed
    if (digitalRead(DOOR_SENSOR_PIN) == HIGH) {
      Serial.println("Door is now opened");
      doorOpenTime = millis();

      if (safeIsUnlocked) {
        
        delay(50);
        isDoorOpen = true;

      } else {
        //The door is opened but the safe was never unlocked
        isDoorOpen = true;
        
        Serial.println("Safe has been tampered with. Door opended without being unlocked");
        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        analogWrite(PIN_BLUE, 0);
        analogWrite(PIN_RED, 250); //red on
        sendEmail(readEEPROM(), "HIGH ALERT: SAFE TAMPER DETECTION", "Hello Safe User, \n\nWE WANT TO ALERT YOU THAT YOUR SAFE HAS BEEN TAMPERED WITH. PLEASE TAKE IMMEDIATE PRECAUTIONS! \n\nThank you, \nSmart Safe");
        //Send the email immediately

      }
      
    }
    
  }

}

///////////////////////////////FINGERPRINT CHECK CODE/////////////////////////////////////////////
uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK) return p;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) return p;

  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
     Serial.println("Access granted");
    
    // Code matched - Access Granted
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_RED, 0);
    analogWrite(buzzerPin, 250);

    delay(1000);
    analogWrite(buzzerPin, 0);

    if (inLockdownMode == true) {
      inLockdownMode = false;
      Serial.println("Lockdown Mode Deactivated");
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("DEACTIVATED" ,35);
        display.display();
      delay(3000);

    }

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("GRANTED" ,35);
    display.display();
    delay(1000);
 
   energizeLock();
    
    //Send Email if Access Attempt is correct
    sendEmail(readEEPROM(), "Smart Safe Access Attempt", "Hello Safe User, \n\nWe wanted to notify you that your safe was accessed. Please review and confirm this activity to ensure it was authorized. You may check the timestamp on this email for the exact time of access. If this was an unauthorized attempt, we recommend securing the safe and taking extra precautions. \n\nThank you, \nSmart Safe");
    Serial.println("Sending safe accessed email...");

    resetCode();


  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Not Valid Finger");

    analogWrite(PIN_RED, 255);
    analogWrite(PIN_GREEN, 0);

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("DENIED" ,35);
    display.display();

    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);
    delay(500);
    analogWrite(buzzerPin, 250);
    delay(500);
    analogWrite(buzzerPin, 0);

    delay(2000);

    //Still in Lockdown Mode
    if(inLockdownMode == true){
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();
      
      Serial.println("Still in Lockdown Mode");
    } else {
      resetCode();
    }
  }

  return p;
}

/////////////////////////////// SEND EMAIL/EMAIL SETUP ////////////////////////////////////////////
void sendEmail(String emailAddress, String subject, String body) {
  /*
  //Set display screen to sending email message
  if(attempts != 4){
       display.clearDisplay();
       display.setTextSize(1);
       display.setTextColor(WHITE);
       displayCenteredText("SmartSafe", 5);
       display.setTextSize(1);
       displayCenteredText("Sending Email...", 35);
       display.display();
  }
*/
  ESP_Mail_Session session;
  session.server.host_name = SMTP_server ;
  session.server.port = SMTP_Port;
  session.login.email = sender_email;
  session.login.password = sender_password;
  session.login.user_domain = "";

  /* Declare the message class */
  SMTP_Message message;
  message.sender.name = "Smart Safe";
  message.sender.email = sender_email;
  message.subject = subject;
  message.addRecipient(Recipient_name, emailAddress);
  String textMsg = "Thank you for registering your Email with us!";
  message.text.content = body.c_str();
  message.text.charSet = "us-ascii";
  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  if (!smtp.connect(&session))
    return;
  if (!MailClient.sendMail(&smtp, &message))
    Serial.println("Error sending Email, " + smtp.errorReason());

}
