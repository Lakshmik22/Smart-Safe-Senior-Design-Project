#include <Arduino.h>
#include <Keypad.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED Definitions
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Keypad Definitions
#define ROWS 4
#define COLS 4

#define PIN_RED 2
#define PIN_GREEN 4

#define RELAY_PIN 23

// Buzzer Pin
const int buzzerPin = 15;

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

bool inLockdownMode = false;
unsigned long int disableUntil = 0;
const unsigned long disableDuration = 10000;

char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

uint8_t rowPins[ROWS] = {33, 32, 18, 19}; // GPIO pins for keypad rows
uint8_t colPins[COLS] = {14, 27, 26, 25}; // GPIO pins for keypad columns

Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);

// Code Variables
char enteredCode[4] = {' ', ' ', ' ', ' '};
char correctCode[4] = {'1', '2', '3', '4'};
int numberOfCodeDigitsEntered = 0;
int attempts = 0;

void resetCode() {
  for (int i = 0; i < 4; i++) {
    enteredCode[i] = ' ';
    enteredCode[i] = '\0';
  }
  numberOfCodeDigitsEntered = 0;

  // Reset LEDs and display
  analogWrite(PIN_RED, 0);
  analogWrite(PIN_GREEN, 0);
}

void checkEnteredCode() {
  bool codeMatched = true;

  // Loop over the correct code and check against the entered code
  for (int i = 0; i < 4; i++) {
    if (correctCode[i] != enteredCode[i]) {
      codeMatched = false;
      break;
    }
  }

  if (codeMatched == true) {
    // Code matched - Access Granted
    Serial.println("Access granted");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("GRANTED" ,35);
    display.display();

    analogWrite(PIN_GREEN, 250);
    analogWrite(buzzerPin, 250);
    delay(1000);
    analogWrite(PIN_GREEN, 0);
    analogWrite(buzzerPin, 0);

    energizeLock();
    delay(5000);
    deenergizeLock();

    attempts = 0;
    resetCode();

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    displayCenteredText("Enter code", 20);
    displayCenteredText("or", 35);
    displayCenteredText("use fingerprint", 50);
    display.display();

  } else {
    // Code did not match - Access Denied
    Serial.println("Access denied");
    attempts++;
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    displayCenteredText("SmartSafe", 5);
    display.setTextSize(1);
    displayCenteredText("ACCESS", 20);
    displayCenteredText("DENIED" ,35);

    // Display "X" symbols horizontally for each failed attempt
    display.setTextSize(1);
    int startX = 40; // Start position for the first "X"
    int yPosition = 50; // Fixed y position for all "X"s

    for (int i = 0; i < attempts; i++) {
      display.setCursor(startX + (i * 20), yPosition); // Move right for each "X"
      display.print("X");
    }

    display.display();

    analogWrite(PIN_RED, 250);
    analogWrite(buzzerPin, 250);
    delay(1000);
    analogWrite(buzzerPin, 0);
    analogWrite(PIN_RED, 0);
    
    if(attempts != 3){
      resetCode();
      updateOLEDDisplay();
    }
  }

  if(attempts==3){
        Serial.println("LOCKDOWN MODE ACTIVATED!");
        resetCode();
        inLockdownMode = true;
        disableUntil = millis() + disableDuration;

        analogWrite(buzzerPin, 250); // Set to HIGH to make the buzzer sound
        analogWrite(PIN_RED, 250); //red on
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.display();

        delay(500); // red on
        analogWrite(PIN_RED, 250);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED" ,35);
        display.display();

        delay(500); // red off
        analogWrite(PIN_RED, 0);
        analogWrite(buzzerPin, 0); // LOW to turn off the buzzer
        attempts=0;

        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        displayCenteredText("SmartSafe", 5);
        display.setTextSize(1);
        displayCenteredText("LOCKDOWN", 20);
        displayCenteredText("ACTIVATED", 35);
        displayCenteredText("Use fingerprint", 50);
        display.display();
      }
}

//Unlocks door
void energizeLock(){ //unlock door
  digitalWrite(RELAY_PIN, LOW);
}

//Locks door
void deenergizeLock(){ //lock door
  digitalWrite(RELAY_PIN, HIGH);
}

// Function that displasy centered text
void displayCenteredText(const char* text, int y) {
  int16_t x1, y1;
  uint16_t w, h;
  
  display.getTextBounds(text, 0, y, &x1, &y1, &w, &h); // Get text dimensions
  
  int x = (SCREEN_WIDTH - w) / 2; // Center text horizontally

  display.setCursor(x, y);
  display.print(text);
}

// Update OLED Display based on code
void updateOLEDDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe", 5);
  display.setTextSize(2);
  display.setCursor(20, 25);
  
  // Show "*" for each entered digit
  for (int i = 0; i < numberOfCodeDigitsEntered; i++) {
    display.print("* ");
  }
  display.display();
}

// SETUP
void setup() {
  // Initialize Serial Communication
  Serial.begin(9600);

  // Initialize Pins
  pinMode(PIN_RED, OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT); 

  // Reset Code
  resetCode();

  // Initialize I2C (Ensure correct pins are used)
  Wire.begin(21, 22);  // Default I2C pins for ESP32 (modify if needed)
  delay(100);          // Allow time for I2C to stabilize

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Check OLED I2C address (default 0x3C)
    Serial.println("SSD1306 allocation failed");
    for (;;); // Halt the program if the display doesn't initialize
  }

  //clear display and setup display settings
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  displayCenteredText("SmartSafe", 5);
  displayCenteredText("Enter code", 20);
  displayCenteredText("or", 35);
  displayCenteredText("use fingerprint", 50);
  display.display();

  //ensure lock is locked
  deenergizeLock();
}

void loop() {
  if (inLockdownMode && millis() < disableUntil) {
      return; // Do nothing while keypad is disabled
    }

    if (millis() == disableUntil) {
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      displayCenteredText("SmartSafe", 5);
      displayCenteredText("Enter code", 20);
      displayCenteredText("or", 35);
      displayCenteredText("use fingerprint", 50);
      display.display();
    }
    
    if (millis() >= disableUntil) {
      inLockdownMode = false; // Re-enable the keypad after timeout
    }

    if (keypad.getKeys()) {
      for (int i = 0; i < LIST_MAX; i++) {
        if (keypad.key[i].stateChanged) { // Only find keys that have changed state
          switch (keypad.key[i].kstate) { // Check active key state
            case PRESSED:
            Serial.println(keypad.key[i].kchar);
            analogWrite(buzzerPin, 250);
            delay(200);
            analogWrite(buzzerPin, 0);
              switch (keypad.key[i].kchar) {
                case '*': // Reset
                  resetCode();
                  updateOLEDDisplay();
                  break;
                case '#': // Check code
                  checkEnteredCode();
                  break;
                default: // Enter digits
                  if (numberOfCodeDigitsEntered < 4) {
                    enteredCode[numberOfCodeDigitsEntered] = keypad.key[i].kchar;
                    numberOfCodeDigitsEntered++;
                    updateOLEDDisplay();
                  } else {
                    Serial.println("Too many digits entered! Code reseted");
                    resetCode();
                    updateOLEDDisplay();
                  break;
              }
              break;
          }
        }
      }
    }
  }
}
